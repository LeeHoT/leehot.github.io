<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leehotin&#39; Blog</title>
  
  <subtitle>你若安好 便是晴天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-08T10:53:12.281Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leehotin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式-工厂模式</title>
    <link href="http://yoursite.com/2017/12/08/design-pattern-of-factory-pattern/"/>
    <id>http://yoursite.com/2017/12/08/design-pattern-of-factory-pattern/</id>
    <published>2017-12-08T04:20:37.000Z</published>
    <updated>2017-12-08T10:53:12.281Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/design_pattern_of_factory.png" alt="工厂模式"><br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>工厂模式(Factory Pattern)是JAVA中最常用的设计模式之一。在<a href="/2017/12/08/design-pattern/">设计模式-总体概述</a>中我们有提到了，工厂模式属于创建型模式，它所提供给我们的是一种最佳的创建对象的方式，让我们在创建对象时不把创建逻辑暴露给调用者，并且使用一个共同的接口来指向新创建的对象。<br>这里今天我们主要介绍两种工厂模式：简单工厂模式(又称静态工厂方法模式)和工厂方法模式</p><h2 id="简单工厂模式组成"><a href="#简单工厂模式组成" class="headerlink" title="简单工厂模式组成"></a>简单工厂模式组成</h2><ul><li>工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑，用来创建产品</li><li>抽象产品角色：它一般是具体产品继承的父类或者实现的接口。         </li><li>具体产品角色：工厂类所创建的对象就是此角色的实例。</li></ul><h2 id="工厂方法模式组成"><a href="#工厂方法模式组成" class="headerlink" title="工厂方法模式组成"></a>工厂方法模式组成</h2><ul><li>抽象工厂角色：这是工厂方法模式的核心，是具体工厂角色必须实现的接口或者必须继承的父类。</li><li>具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。</li><li>具体产品角色：具体工厂角色所创建的对象就是此角色的实例。</li></ul><h1 id="目的及使用场景"><a href="#目的及使用场景" class="headerlink" title="目的及使用场景"></a>目的及使用场景</h1><p>在任何需要生成复杂对象的地方，都可以使用工厂方法模式，如果直接可以用new完成的，完全不需要是用工厂模式</p><p>简单工厂模式是我们创建一个静态的方法，该方法根据调用者传递的类型返回对应的实例。<br>工厂方法模式就是我们自定义一个创建对象的接口(工厂)，而真正要实例化哪种工厂就由子类自己去决定，这样就可以把真正的创建过程延迟到子类去实现，而且具体的功能实现也交给子类去完成。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="简单工厂的实现"><a href="#简单工厂的实现" class="headerlink" title="简单工厂的实现"></a>简单工厂的实现</h2><p>好了，毕竟谁都想当个有钱人嘛，那咱就建个宝马工厂造宝马吧。我要开始着手造车了。要想富，先铺路。先把车搞起来再说<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BWMCar</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 各种型号的BWM</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getBWMCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>车模子是有了，可是问题来了，生产什么车呢，我可是天秤座啊，你让我选择，不如让我去死。还好我有一大家子人和一堆朋友，管他呢，先把架子搭好，谁要啥车再说。<br>南哥打电话说要辆宝马X6，废话不多说，赶紧准备车吧，不然来提车了拿不出来就尴尬了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BWMX6</span> <span class="title">entends</span> <span class="title">BWMCar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Overrive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBWMCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"宝马X6,这SUV就是宽敞啊"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>女票昨天偷摸告诉我要辆MINI COOPER，神奇了，我竟然还能找到女票，这可不能耽搁啊，赶紧的造吧<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniCooper</span> <span class="title">entends</span> <span class="title">BWMCar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Overrive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBWMCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MINI COOPER,果然女人的最爱啊"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>粑粑伦又说要个宝马740Li，回头得坑这家伙一笔，就知道要好车。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BWM740Li</span> <span class="title">entends</span> <span class="title">BWMCar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Overrive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBWMCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"宝马740Li,不愧是宝马7系，舒服"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>车子是准备工作做好了，就差厂房造车了，不墨迹，盖盖盖…<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BWM4SFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BWM_X6 = <span class="number">1</span>;<span class="comment">//南哥的宝马X6</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINI_COOPER = <span class="number">2</span>;<span class="comment">//女票的MINI COOPER</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BWM_740Li = <span class="number">3</span>;<span class="comment">//粑粑伦的宝马740Li</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BWMCar <span class="title">createBWMCar</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BWMX6();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MiniCooper();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BWM740Li();</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>厂子盖好了，车子也准备好了，完美，他们都来提车了，幸好提前弄好了，不然得挨骂啊。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Friends</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//南哥要宝马X6</span></span><br><span class="line">        BWMCar bwmX6 = BWM4SFactory.createCar(BWM4SFactory. BWM_X6).getBWMCar();</span><br><span class="line">        <span class="comment">//女票要MINI COOPER</span></span><br><span class="line">        BWMCar miniCooper = BWM4SFactory.createCar(BWM4SFactory. MINI_COOPER).getBWMCar();</span><br><span class="line">        <span class="comment">//粑粑伦要宝马740Li,统统都给他们了</span></span><br><span class="line">        BWMCar bwm740Li = BWM4SFactory.createCar(BWM4SFactory. BWM_740Li).getBWMCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>终于给他们把车弄走了，可算是松了一口气。车子送走了，得好好分析一下这厂子到底怎么样啊<br>如果有其他的亲们好友来找我要车了，即使是换个车型，只要这个车符合我们的制作标准，就可以直接通知工厂造车了，是符合扩展开放原则的，但是！但是！但是！工厂麻烦了，每次有新型号的车的需求，我就得装修一次工厂(在工厂createBWMCar(type)方法中新增case)，这不符合修改封闭啊，这要是一不小心厂子搞炸了，别说新车型了，旧车都造不了了，这还玩什么玩。而且现实生活中，产品(车)的型号大多呈现多层次的树状结构，这迟早得把厂子搞破产不行。先改进一波试试，总比这样等死强。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>除此之外我们还可以利用反射机制来实现简单工厂<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticBWM4SFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入Class实例化汽车类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends INoodles&gt; <span class="function">T <span class="title">createCar</span><span class="params">(Class&lt;T&gt; clz)</span> </span>&#123;</span><br><span class="line">        T result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = (T) Class.forName(clz.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在提车的时候根据反射机制返回我们需要的对象并不需要修改我们的工厂的create()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BWMX6 bwmXe6 = StaticBWM4SFactory.createCar(BWMX6.class). getBWMCar();</span><br></pre></td></tr></table></figure></p><p>但是这个不光存在反射的效率问题，既然我们用工厂模式，自然是为了实现复杂对象的初始化了，可是这个在方法在调用有参的构造函数时就显得无能为力了。</p><h2 id="工厂方法的实现"><a href="#工厂方法的实现" class="headerlink" title="工厂方法的实现"></a>工厂方法的实现</h2><p>工厂方法模式去掉了简单工厂模式那些静态属性，并把工厂定义成了接口，以后每新增车型，只要增加这个车型对应的工厂类的实现就好了，这样其他工厂不用动，而且像增加多少车型增加多少车型。说走咱就走，马上重新盖厂房。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>厂子建好了，开始搞车吧，先不说别的，把南哥、女票和粑粑伦之前要的车早好再说，要是造不好就别提改进的事了。<br>南哥的宝马X6<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BWMX6Factory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"帅气的宝马X7"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>女票的MINI COOPER<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniCooperFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小巧的MINI COOPER"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>粑粑伦的宝马740Li<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BWM740liFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"豪华的宝马740Li"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完美，看来制车的事情肯定是没问题了，这时候如果老妈要一辆宝马530i，么得问题，盖厂子，产…<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BWM530iFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"舒适的宝马530i"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这次他们谁来提车就给他啥车，没有我就大不了再建厂子(满足扩展开放原则)，反正不影响其他的生意(满足修改封闭原则)。我勒个去，等等，他们新加车型我就要新盖厂子，虽然是不影响其他的车了，但是厂子多了管理起来不得累死我，我还想多活几年啊。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//南哥要宝马X6,给他</span></span><br><span class="line">CarFactory bwmX6Factory = <span class="keyword">new</span> BWMX6Factory();</span><br><span class="line">bwmX6Factory.createCar();</span><br><span class="line"><span class="comment">//女票要MINI COOPER，给她</span></span><br><span class="line">CarFactory miniCooperFactory = <span class="keyword">new</span> MiniCooperFactory();</span><br><span class="line">miniCooperFactory.createCar();</span><br><span class="line"><span class="comment">//粑粑伦要宝马740Li，给他</span></span><br><span class="line">CarFactory bwm740liFactory = <span class="keyword">new</span> BWM740liFactory();</span><br><span class="line">bwm740liFactory.createCar();</span><br><span class="line"><span class="comment">//老妈要宝马530i，给她</span></span><br><span class="line">CarFactory bwm530iFactory = <span class="keyword">new</span> BWM530iFactory();</span><br><span class="line">bwm530iFactory.createCar();</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在<strong>简单工厂模式</strong>中，我们所做出来的产品要抽象，每当我们有新的产品增加时，不光要实例化新产品，还需要修改工厂类的create()方法。但是调用者只需要知道他需要什么就可以了。<br><strong>工厂方法模式</strong>使一个产品类的实例化延迟到其具体工厂子类，好处就是更拥抱变化，毕竟女大十八变，越变越好看嘛。当需求变化，只需要增删相应的类，不需要修改已有的类，扩展性高。而且屏蔽产品的具体实现，调用者只关心产品的接口。但是每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/design_pattern_of_factory.png&quot; alt=&quot;工厂模式&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-总体概述</title>
    <link href="http://yoursite.com/2017/12/08/design-pattern/"/>
    <id>http://yoursite.com/2017/12/08/design-pattern/</id>
    <published>2017-12-08T00:54:37.000Z</published>
    <updated>2017-12-08T10:04:10.056Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/design_pattern.png" alt="设计模式"><br><a id="more"></a></p><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>&emsp;&emsp;设计模式对我们开发者而言。不必多说，重点中的战斗机。相信大家大学时期肯定都接触过了，不过似乎可能给老师塞得红包不够，虽然考试过了，但是知识迫不得已又还回去了，简直是大写的惨。所以，经居委会研究谈论认为，没有什么设计模式是一次学不会的，如果一次不行，那就二二三四再来一次吧。本文大部分内容参考于<a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>，详细的内容介绍将在后边的文章中进行介绍，不要错过哦</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>&emsp;&emsp;<font weight="45" color="red" size="3">设计模式 (Design pattern)</font> 代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。<br>&emsp;&emsp;Balabala···，还有好多官方性的内容介绍，想了解的可以坐车到<a href="https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1212549?fr=aladdin" target="_blank" rel="noopener">百度百科</a>查看更多的解释，这里就不多说了。</p><h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>&emsp;&emsp;根据 <strong>Design Pattern-Elements of Reusable Object-Oriented Software</strong> 提到的，设计模式总共有 <font color="blue">23</font> 种,这些设计模式共可以分为三大类</p><p><font size="4">1.创建型模式(Creational Patterns)</font></p><ul><li>工厂模式(Factory Pattern)</li><li>抽象工厂模式(Abstract Factory Pattern)</li><li>单例模式(Singleton Pattern)</li><li>建造者模式(Builder Pattern)</li><li>原型模式(Prototype Pattern)</li></ul><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p><p><font size="4">2.结构型模式(Structural Patterns)</font></p><ul><li>适配器模式(Adapter Pattern)</li><li>桥接模式(Brideg Pattern)</li><li>过滤器模式(Filter Pattern)</li><li>组合模式(Composite Pattern)</li><li>装饰器模式(Decorator Pattern)</li><li>外观模式(Facade Pattern)</li><li>享元模式(Flyweight Pattern)</li><li>代理模式(Proxy Pattern)</li></ul><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><p><font size="4">3.行为型模式(Behavioral Patterns)</font></p><ul><li>责任链模式(Chain of Responsibility Pattern)</li><li>命令模式(Command Pattern)</li><li>解释器模式(Interpreter Pattern)</li><li>迭代器模式(Iterator Pattern)</li><li>中介者模式(Mediator Pattern)</li><li>备忘录模式(Memento Pattern)</li><li>观察者模式(Observer Pattern)</li><li>状态模式(State Pattern)</li><li>空对象模式(Null Object Pattern)</li><li>策略模式(Strategy Pattern)</li><li>模板模式(Template Pattern)</li><li>访问者模式(Visitor Pattern)</li></ul><p>这些设计模式特别关注对象之间的通信</p><p>而这些设计模式之间又存在着各种各样的关系<br><img src="/images/the-relationship-between-design-patterns.jpg" alt="设计模式之间的关系"></p><h2 id="设计模式六大原则"><a href="#设计模式六大原则" class="headerlink" title="设计模式六大原则"></a>设计模式六大原则</h2><p><strong>1.开闭原则(Open Close Principle)</strong><br>开闭原则的意思是：<font color="red">对扩展开放，对修改关闭</font>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个<font color="red">热插拔</font>的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。<br><strong>2.里式替换原则(Liskov Substitution Principle)</strong><br>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是<font color="red">抽象化</font>，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是<font color="red">对实现抽象化的具体步骤的规范</font>。<br>简单总结：实现抽象的规范，实现子夫类互相替换<br><strong>3.依赖反转原则(Dependence Inversion Principle)</strong><br>这个原则是开闭原则的基础，具体内容：<font color="red">针对接口编程，依赖于抽象</font>而不依赖于具体。<br><strong>4.接口隔离原则(Interface Segregation Principle)</strong><br>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：<font color="red">降低类之间的耦合度</font>。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。<br><strong>5.迪米特法则(Demeter Principle)</strong><br>最少知道原则是指：一个<font color="red">实体应当尽量少地与其他实体之间发生相互作用</font>，使得系统功能模块相对独立。<br><strong>6.合成复用原则(Composite Reuse Principlev)</strong><br>合成复用原则是指：尽量<font color="red">使用合成/聚合</font>的方式，而不是使用继承。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/design_pattern.png&quot; alt=&quot;设计模式&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo在Github搭建博客(MAC)</title>
    <link href="http://yoursite.com/2017/12/05/hexo-next-deploy-and-optimize-md/"/>
    <id>http://yoursite.com/2017/12/05/hexo-next-deploy-and-optimize-md/</id>
    <published>2017-12-05T05:45:28.000Z</published>
    <updated>2017-12-06T12:57:00.226Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/next.png" width="800px" height="200px"><br><a id="more"></a></p><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这算是本人正经写的第一篇文章了，讲真还有些不习惯，自己平时也看的少，不知道大家都是什么风格，也不知道各位来自”名门正派”的豪杰喜欢什么画风。总之就是，有问题可以随时评论区留言，我这文章可能写的不好，但是吹牛调侃还是一流的，哇哈哈。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单的小牛皮就吹到这里，我们进入正题。</p><h1 id="Hexo的搭建"><a href="#Hexo的搭建" class="headerlink" title="Hexo的搭建"></a>Hexo的搭建</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部分内容主要讲述了本人在Mac环境下一步一步在<a href="https://github.com/" target="_blank" rel="noopener">Github</a>搭建<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>博客的艰险历程，过程稍微曲折，但是结果很完美，就像你们现在看到的这样。 文章所有内容都是在Mac下进行实际操作的，如果哪里和Windows的设置有不同的地方且没有提及的，还望大家留言，我会及时进行记录并更改。</p><h2 id="Hexo环境配置"><a href="#Hexo环境配置" class="headerlink" title="Hexo环境配置"></a>Hexo环境配置</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官方文档</a>对Hexo的下载安装已经有了非常详细的介绍，本人还是比较推荐官方文档，毕竟辣么权威。当然我这里也是可以滴，否则我现在还不知道在干啥。(<em>^__^</em>) 嘻嘻……</p><h3 id="要求-Requirements"><a href="#要求-Requirements" class="headerlink" title="要求(Requirements)"></a>要求(Requirements)</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装Hexo还是非常轻松的，但是为此需要先做一些事情，就好像盖房子怎么着都得先有地基吧</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://github.com/" target="_blank" rel="noopener">Github</a></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果你的电脑没有这两个那么就需要自己安装啦。</p><h3 id="安装Git-Install-Git"><a href="#安装Git-Install-Git" class="headerlink" title="安装Git(Install Git)"></a>安装Git(Install Git)</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mac下的Xcode是自带Git的，如果没有Xcode，那么可以参考<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网</a>的方法，我们这里就直接引用下官网的内容。</p><blockquote><p><font size="5" color="red">For Mac users</font><br>You may encounter some problems when compiling. Please install Xcode from App Store first. After Xcode is installed, open Xcode and go to Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install to install command line tools.</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大概意思就是：如果你在编译的时候遇到了问题，请从先App Store安装Xcode，安装完成之后打开Xcode,然后到 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install to install command line tools. 安装命令行工具就OK啦<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当然如果是Windows的话可以点击<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a>下载安装，或者可以<a href="https://git-scm.com/download/" target="_blank" rel="noopener">选择Git版本</a>进行下载安装，这里就不赘述安装过程了。</p><h3 id="安装Node-js-Install-Node-js"><a href="#安装Node-js-Install-Node-js" class="headerlink" title="安装Node.js(Install Node.js)"></a>安装Node.js(Install Node.js)</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node.js主要是为了生成静态页面使用的，本地终端可以通过命令输入 node -v 来验证node.js版本，如果没有那就要考虑安装了，如果你的Mac安装了homebrew的话，那么很完美，直接使用 brew 命令进行安装即可，没有的话就只能是到<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>官网去下载安装了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ brew install node</span><br></pre></td></tr></table></figure></p><p><img src="/images/nodejs-verison-install.png" alt="nodejs-version"></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Git和Node.js都安装完成之后，关键时刻来了，安装Hexo，终端执行如下命令即可，其中-g表示全局安装。哈哈，好像就一步就完成了唉。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo</span><br></pre></td></tr></table></figure></p><blockquote><p>这里需要注意一定要带上sudo(linux系统管理指令)命令，否则会权限不足。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后选定一个你打算放博客的目录，执行 hexo init 命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog//初始化hexo 文件夹</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中blog就是未来你准备放博客的目录啦，<strong>以后所有的操作都要在blog目录下进行操作了</strong>。所以我们就直接 cd 都blog目录下。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行hexo g 命令生成静态页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行hexo s 启动本地的hexo服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s//启动本地Hexo 服务器</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个时候我们就可以通过访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 来访问了,然后就会看到如下图的界面了。感觉终于看到希望了，没错，我们离成功不远啦，哈哈！！！加油<br><img src="/images/hexo-s-localhost.png" alt="http://localhost:4000/"><br>如果需要更多的 hexo 功能命令可以直接在终端键入 hexo help 获取更多的命令，本人建议简单看一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="built_in">help</span></span><br></pre></td></tr></table></figure></p><h3 id="创建Github仓库并关联"><a href="#创建Github仓库并关联" class="headerlink" title="创建Github仓库并关联"></a>创建Github仓库并关联</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们这了假设你已经有了<a href="https://github.com/" target="_blank" rel="noopener">Github</a>账号并已登录成功，因为我想注册个Github账号还是没有啥难度的吧，不过如果有不知道的可以留言，我还是会帮你解决滴。在这个过程中我们可能需要在浏览器和本地终端来回穿梭了，不过车很稳，大可放心。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先我们需要新建一个Github仓库，这里需要注意，仓库的名字为<strong>用户名.github.io</strong>，这是固定用法，比如我的Github用户名为LeehoT，所以我的仓库名为<a href="https://github.com/LeeHoT/leehot.github.io" target="_blank" rel="noopener">leehot.github.io</a>，没错，和你看到的是一样的，这里的英文是不区分大小写的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来回到我们的终端，cd 到我们刚才创建的blog目录下，内容很多，但是用的最多的就是</p><blockquote><p>   _config.yml文件<br>   source文件夹<br>   themes文件夹</p></blockquote><p>然后终端输入 vi _config.yml 打开配置文件，注意以后我们就称这个文件为<strong>站点配置文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi _config.yml</span><br></pre></td></tr></table></figure></p><p>打开文件之后直接输入 /deploy(搜索包含 deploy 的字符串)后回车或者直接翻到文件最低端，将 deploy 部分代码修改为如下代码，只需要把leehot替换为你的Github用户名即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/LeeHoT/leehot.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><blockquote><h2 id="号外号外"><a href="#号外号外" class="headerlink" title="号外号外"></a>号外号外</h2><p>这里的: 后边一定要有一个空格，在之后所有的修改中如果没有特殊说明的话，所有配置的参数的: 后边都要和参数值之间有个空格。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中repository的地址可以在下图这个位置获取<br><img src="/images/repository-location.png" alt="repository-location"><br>接下来我们关联Github<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"leehotin(用户名)"</span></span><br><span class="line">$ git config --global user.email <span class="string">"leehot1009@gmail.com(你的邮箱)"</span></span><br></pre></td></tr></table></figure></p><p>然后在 blog文件夹下通过 hexo generate 或者 hexo g 来生成静态文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g//生成静态文件</span><br></pre></td></tr></table></figure></p><p>如果这个时候报错了，内容如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR LOCAL hexo not found <span class="keyword">in</span> /blog</span><br><span class="line">ERROR Try running: <span class="string">'npm install hexo --sava'</span></span><br></pre></td></tr></table></figure></p><p>很明显，既然他都说尝试一下，那咱们就尝试一下呗,然后再运行 hexo g 会发现不报错了。</p><p>生成静态文件之后那就该部署啦，执行 hexo deploy 或者 hexo d 来部署项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d//部署项目</span><br></pre></td></tr></table></figure></p><p>如果这个时候又报错了，说什么： 无法连接Git或者找不到Git，那就通过安装 hexo-deployer-git 来解决了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>然后重新执行 hexo g 和 hexo d来重新部署</p><p>同时如果你的电脑并没有把ssh key关联到 Github的话，我们为了避免每次部署都输入密码，就需要将你电脑的key 关联到Github上，这里我们简单说一下绑定的方法</p><p>1、生成ssh key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"注册Github时的邮箱"</span></span><br></pre></td></tr></table></figure></p><p>2、关联Github<br>生成的ssh key 默认早 ~/.ssh/id_rsa.pub 文件夹下，复制文件内容，然后坐车到 Github，点击右上角头像 -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key -&gt; 粘贴内容后Add SSH key 即可完成</p><p>完事之后我们回到blog目录下，最一开始我们就说了所有的命令都是在这个文件夹下执行的，包括刚刚的 hexo g 和 hexo d 以及 hexo s<br>激动人心的时刻到了，让我们来自己创建我的第一篇博客吧<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"PostName"</span>//创建新的文章</span><br></pre></td></tr></table></figure></p><p>执行命令之后会在 ./source/_posts/下创建一个名为 PostName.md 的文件，然后就是用Markdown来操作文章了，至于编辑器，你可以选择高逼格的 vi ，也可以选用MacDown(如果你的地点是10.11.x，比较推荐使用Mou，由于我的电脑升到了High Sierra，目前是无福消受这个了)。接下来就是生成静态文件和部署了，这里还有一种写法 hexo d -g ,这个可以一步执行两步的内容。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g//生成静态文件并部署</span><br></pre></td></tr></table></figure></p><p>另外，我个人觉得每次部署之前执行一次 hexo clean 清理一下之前生成的静态文件和缓存会更好，不过我没有去深入研究，具体还有待考证，或者知道的大佬可以讲一讲，不胜感激。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean//清理静态文件和缓存</span><br></pre></td></tr></table></figure></p><p>哎呀，终于说的差不多了，到此我们算是有一个基本的壳子了。接下来要做的就是找到一个更好的主题来让自己的博客更加完美，我们会在之后的内容中介绍一个一个非常火热的主题： Next主题，这是目前为止Star最多的一个了，相信你会喜欢的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/next.png&quot; width=&quot;800px&quot; height=&quot;200px&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>作为一个JAVA辣鸡的第一篇博客</title>
    <link href="http://yoursite.com/2017/12/05/the_first_blog/"/>
    <id>http://yoursite.com/2017/12/05/the_first_blog/</id>
    <published>2017-12-05T05:32:26.154Z</published>
    <updated>2017-12-05T05:32:26.154Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pexels-photo-127904.jpeg" width="800px" height="200px"><br><a id="more"></a></p><h3 id="评论一番"><a href="#评论一番" class="headerlink" title="评论一番"></a>评论一番</h3><p>第一个文章真不知道写点啥，不如大家来评论一下我这个人，敞开了说，反正我不知道你是谁！🐶🐶🐶🐶🐶🐶🐶🐶</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/pexels-photo-127904.jpeg&quot; width=&quot;800px&quot; height=&quot;200px&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="辣鸡" scheme="http://yoursite.com/tags/%E8%BE%A3%E9%B8%A1/"/>
    
  </entry>
  
</feed>
